name: Update tech badges

on:
  push:
    branches: ["**"]
  schedule:
    - cron: "0 9 * * 1" # Mondays 09:00 UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-badges:
    runs-on: ubuntu-latest
    env:
      README_PATH: README.md
      SECTION_START: "<!-- TECH-STACK:START -->"
      SECTION_END: "<!-- TECH-STACK:END -->"
      BADGE_STYLE: "flat"
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0 # ðŸ‘ˆ get full history so we can rebase/pull

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Simple Icons (brand colors)
        run: npm i simple-icons@^13

      - name: Build tech stack section and update README
        run: |
          node - <<'NODE'
          // (unchanged Node script you have now â€“ outputs a centered, icons-only block)
          // ...
          NODE

      - name: Commit, pull --rebase, and push
        env:
          PAT_OR_TOKEN: ${{ secrets.PERSONAL_TOKEN || secrets.GITHUB_TOKEN }}
          README_PATH: README.md
        run: |
          set -e

          # If nothing changed, exit early
          if git diff --quiet -- "${README_PATH}"; then
            echo "No changes."
            exit 0
          fi

          # Configure git user + safe dir (needed in GitHub-hosted runners sometimes)
          git config --global --add safe.directory "$(pwd)"
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Commit local change
          git add "${README_PATH}"
          git commit -m "chore: refresh Tech Stack badges (icons only, centered, flat style)"

          # Figure out target branch: prefer the workflow's ref name, then main, then master
          BRANCH="${GITHUB_REF_NAME:-}"
          if [ -z "$BRANCH" ]; then
            # Try to detect remote default branch
            BRANCH="$(git remote show origin | sed -n '/HEAD branch/s/.*: //p')"
          fi
          if [ -z "$BRANCH" ]; then
            # Fallbacks
            if git ls-remote --exit-code --heads origin main >/dev/null 2>&1; then
              BRANCH="main"
            elif git ls-remote --exit-code --heads origin master >/dev/null 2>&1; then
              BRANCH="master"
            else
              BRANCH="$(git branch --show-current)"
            fi
          fi
          echo "Target branch: $BRANCH"

          # Ensure we are on the branch locally
          git checkout -B "$BRANCH"

          # Update local branch to include any upstream commits (avoid non-fast-forward)
          git fetch origin
          # Try rebase against $BRANCH; if it doesn't exist, try main then master
          git pull --rebase origin "$BRANCH" || \
          git pull --rebase origin main || \
          git pull --rebase origin master || true

          # Push with a small retry; use --force-with-lease only if needed
          PUSH_URL="https://x-access-token:${PAT_OR_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"

          ( git push "$PUSH_URL" HEAD:"$BRANCH" ) || (
            echo "First push failed, rebasing again and retrying..."
            git fetch origin
            git pull --rebase origin "$BRANCH" || true
            git push "$PUSH_URL" HEAD:"$BRANCH" || git push --force-with-lease "$PUSH_URL" HEAD:"$BRANCH"
          )
